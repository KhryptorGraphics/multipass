name: Build

on:
  push:
    branches:
    - master
    - staging
    - trying
    - release/[0-9]+.[0-9]+
    tags:
    - v[0-9]+.[0-9]+.[0-9]+
  pull_request:

jobs:
  Lint:
    runs-on: ubuntu-latest

    if: ${{ github.event_name == 'pull_request' || contains('refs/heads/staging refs/heads/trying', github.ref) }}

    steps:
    - name: Install clang-format
      run: sudo apt-get install --no-install-recommends --yes clang-format-10

    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Run clang-format through the diff
      run: |
        set -e -o pipefail

        # On pull requests, HEAD^1 will always be the merge base, so consider that diff for formatting.
        git diff -U0 --no-color HEAD^1 | clang-format-diff-10 -p1 | tee ${HOME}/clang-diff
        if [ "$( stat --printf='%s' ${HOME}/clang-diff )" -ne 0 ]; then
          echo "##[error] Please apply the above diff to correct formatting"
          exit 1
        fi

  Build-Test:
    needs: Lint

    strategy:
      matrix:
        build-type: [Debug, Clang, RelWithDebInfo, Coverage]

    runs-on: ubuntu-latest

    steps:
    - name: Install Snapcraft
      uses: samuelmeuli/action-snapcraft@v1

    # Could use `use_lxd: true` above, but lxc/lxd-pkg-snap#63 makes it go stuck for 10 minutes.
    - name: Install LXD
      run: |
        sudo apt-get remove --purge --yes lxd lxd-client
        sudo snap install lxd
        sudo /snap/bin/lxd waitready
        sudo /snap/bin/lxd init --auto
        sudo usermod --append --groups lxd $USER

    - name: Check out code
      uses: actions/checkout@v2
      with:
        # Need to fetch it all for submodules to work.
        fetch-depth: 0

    - name: Check out submodules
      run: |
        git submodule sync
        # This repository can't do depth.
        git -c protocol.version=2 submodule update --init 3rd-party/xz-decoder/xz-embedded
        git -c protocol.version=2 submodule update --init --force --depth=1 --recursive

    - name: Fetch tags
      run: |
        git fetch --no-recurse-submodules origin +refs/tags/*:refs/tags/*

    - name: Patch
      run: |
        [ ! -f tests/travis.patch ] || patch -p1 --no-backup-if-mismatch < tests/travis.patch
        [ ! -f tests/travis-${{ matrix.build-type }}.patch ] || patch -p1 --no-backup-if-mismatch < tests/travis-${{ matrix.build-type }}.patch

    - name: Set up CCache
      id: setup-ccache
      run: |
        sudo apt-get install ccache
        ccache --max-size=2G
        sg lxd -c '/snap/bin/lxc profile device add default ccache disk source=${HOME}/.ccache/ path=/root/.ccache'

        # Find common base between master and HEAD to use as cache key.
        git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules origin master
        echo "::set-output name=key::$( git merge-base origin/master ${{ github.sha }} )"

    - name: CCache
      uses: actions/cache@v2
      with:
        key: ccache-${{ runner.os }}-${{ matrix.build-type }}-${{ steps.setup-ccache.outputs.key }}
        restore-keys: |
          ccache-${{ runner.os }}-${{ matrix.build-type }}-
        path: ~/.ccache/**

    - name: Set up coverage
      if: ${{ matrix.build-type == 'Coverage' }}
      run: |
        mkdir "${HOME}/parts"
        sg lxd -c '/snap/bin/lxc profile device add default build disk source=${HOME}/parts path=/root/parts'

    - name: Build
      run: |
        # Build the `multipass` part.
        sg lxd -c '/snap/bin/snapcraft build --use-lxd multipass'

    - name: Clear CCache stats
      run: ccache --show-stats --zero-stats

    - name: Test
      if: ${{ matrix.build-type == 'Debug' }}
      run: |
        sg lxd -c '/snap/bin/lxc start snapcraft-multipass'
        sg lxd -c \
          '/snap/bin/lxc exec snapcraft-multipass -- \
             env CTEST_OUTPUT_ON_FAILURE=1 \
                 LD_LIBRARY_PATH=/root/stage/usr/lib/x86_64-linux-gnu/:/root/stage/lib/:/root/parts/multipass/build/lib/ \
                 /root/parts/multipass/build/bin/multipass_tests'

    - name: Measure coverage
      if: ${{ matrix.build-type == 'Coverage' }}
      run: |
        sg lxd -c '/snap/bin/lxc start snapcraft-multipass'
        sg lxd -c \
          '/snap/bin/lxc exec snapcraft-multipass -- \
             cmake --build /root/parts/multipass/build --target covreport'
        bash <(curl -s https://codecov.io/bash) -Z -s ${HOME}/parts
