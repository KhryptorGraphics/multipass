name: Build

on:
  push:
    branches:
    - master
    - staging
    - trying
    - release/[0-9]+.[0-9]+
    tags:
    - v[0-9]+.[0-9]+.[0-9]+
  pull_request:

jobs:
  Lint:
    runs-on: ubuntu-latest

    if: ${{ github.event_name == 'pull_request' || contains('refs/heads/staging refs/heads/trying', github.ref) }}

    steps:
    - name: Install clang-format
      run: sudo apt-get install --no-install-recommends --yes clang-format-10

    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Run clang-format through the diff
      run: |
        set -e -o pipefail

        # On pull requests, HEAD^1 will always be the merge base, so consider that diff for formatting.
        git diff -U0 --no-color HEAD^1 | clang-format-diff-10 -p1 | tee ${HOME}/clang-diff
        if [ "$( stat --printf='%s' ${HOME}/clang-diff )" -ne 0 ]; then
          echo "##[error] Please apply the above diff to correct formatting"
          exit 1
        fi

  Build-Test:
    needs: Lint

    outputs:
      channel: ${{ steps.build-params.outputs.channel }}
      snap-file: ${{ steps.build-snap.outputs.snap-file }}

    strategy:
      matrix:
        build-type: [Debug, Clang, RelWithDebInfo, Coverage]

    runs-on: ubuntu-latest

    env:
      # Regexes for release branch and tag
      MULTIPASS_RELEASE_BRANCH_PATTERN: ^refs/heads/release/[0-9\.]+$
      MULTIPASS_RELEASE_TAG_PATTERN: ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$
      SNAPCRAFT_BUILD_INFO: 1

    steps:
    - name: Install Snapcraft
      uses: samuelmeuli/action-snapcraft@v1

    # Could use `use_lxd: true` above, but lxc/lxd-pkg-snap#63 makes it go stuck for 10 minutes.
    - name: Install LXD
      run: |
        sudo apt-get remove --purge --yes lxd lxd-client
        sudo snap install lxd
        sudo /snap/bin/lxd waitready
        sudo /snap/bin/lxd init --auto
        sudo usermod --append --groups lxd $USER

    - name: Check out code
      uses: actions/checkout@v2
      with:
        # Need to fetch it all for submodules to work.
        fetch-depth: 0

    - name: Check out submodules
      run: |
        git submodule sync
        # This repository can't do depth.
        git -c protocol.version=2 submodule update --init 3rd-party/xz-decoder/xz-embedded
        git -c protocol.version=2 submodule update --init --force --depth=1 --recursive

    - name: Fetch tags
      run: |
        git fetch --no-recurse-submodules origin +refs/tags/*:refs/tags/*

    - name: Determine build parameters
      id: build-params
      shell: bash
      run: |
        # If it's a pull request or `trying` push, annotate with `pr#` and publish to `edge/pr#`.
        if [ ${{ github.event_name }} == "pull_request" ]; then
          echo "::set-output name=label::pr${{ github.event.number }}"
          echo "::set-output name=channel::edge/pr${{ github.event.number }}"
        elif [[ ${{ github.event_name }} == "push" && ${{ github.ref }} == "refs/heads/trying" && "${{ github.event.head_commit.message }}" =~ ^Try\ #([0-9]+): ]]; then
          echo "::set-output name=label::pr${BASH_REMATCH[1]}"
          echo "::set-output name=channel::edge/pr${BASH_REMATCH[1]}"

        # If it's a release tag or branch, publish to the `candidate` channel.
        elif [[ ${{ github.ref }} =~ ${MULTIPASS_RELEASE_BRANCH_PATTERN} \
          || ${{ github.ref }} =~ ${MULTIPASS_RELEASE_TAG_PATTERN} ]]; then
          echo "::set-output name=channel::candidate"

        # All other pushes annotate with the CI run number.
        elif [ ${{ github.event_name }} == "push" ]; then
          echo "::set-output name=label::ci${{ github.run_number }}"

        # This shouldn't happen.
        else
            echo "##[error] Build parameter determination fell through"
            exit 1
        fi

    - name: Patch
      run: |
        [ ! -f tests/travis.patch ] || patch -p1 --no-backup-if-mismatch < tests/travis.patch
        [ ! -f tests/travis-${{ matrix.build-type }}.patch ] || patch -p1 --no-backup-if-mismatch < tests/travis-${{ matrix.build-type }}.patch

    - name: Set up CCache
      id: setup-ccache
      run: |
        sudo apt-get install ccache
        ccache --max-size=2G
        sg lxd -c '/snap/bin/lxc profile device add default ccache disk source=${HOME}/.ccache/ path=/root/.ccache'

        # Find common base between master and HEAD to use as cache key.
        git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules origin master
        echo "::set-output name=key::$( git merge-base origin/master ${{ github.sha }} )"

    - name: CCache
      uses: actions/cache@v2
      with:
        key: ccache-${{ runner.os }}-${{ matrix.build-type }}-${{ steps.setup-ccache.outputs.key }}
        restore-keys: |
          ccache-${{ runner.os }}-${{ matrix.build-type }}-
        path: ~/.ccache/**

    - name: Set up coverage
      if: ${{ matrix.build-type == 'Coverage' }}
      run: |
        mkdir "${HOME}/parts"
        sg lxd -c '/snap/bin/lxc profile device add default build disk source=${HOME}/parts path=/root/parts'

    - name: Build
      run: |
        # Inject the build label.
        if [ -n "${{ steps.build-params.outputs.label }}" ]; then
            sed -i "/configflags:/a \    - -DMULTIPASS_BUILD_LABEL=${{ steps.build-params.outputs.label }}" snap/snapcraft.yaml
        fi

        # Build the `multipass` part.
        sg lxd -c '/snap/bin/snapcraft build --use-lxd multipass'

    - name: Clear CCache stats
      run: ccache --show-stats --zero-stats

    - name: Test
      if: ${{ matrix.build-type == 'Debug' }}
      run: |
        sg lxd -c '/snap/bin/lxc start snapcraft-multipass'
        sg lxd -c \
          '/snap/bin/lxc exec snapcraft-multipass -- \
             env CTEST_OUTPUT_ON_FAILURE=1 \
                 LD_LIBRARY_PATH=/root/stage/usr/lib/x86_64-linux-gnu/:/root/stage/lib/:/root/parts/multipass/build/lib/ \
                 /root/parts/multipass/build/bin/multipass_tests'

    - name: Measure coverage
      if: ${{ matrix.build-type == 'Coverage' }}
      run: |
        sg lxd -c '/snap/bin/lxc start snapcraft-multipass'
        sg lxd -c \
          '/snap/bin/lxc exec snapcraft-multipass -- \
             cmake --build /root/parts/multipass/build --target covreport'
        bash <(curl -s https://codecov.io/bash) -Z -s ${HOME}/parts

    - name: Build and verify the snap
      id: build-snap
      if: ${{ matrix.build-type == 'RelWithDebInfo' }}
      env:
        SNAP_ENFORCE_RESQUASHFS: 0
      run: |
        # Actually build the snap.
        sg lxd -c '/snap/bin/snapcraft --use-lxd'

        sudo snap install review-tools
        /snap/bin/review-tools.snap-review --plugs=snap/local/plugs.json *.snap

        echo "::set-output name=snap-file::$( ls *.snap )"

    - name: Upload the snap
      uses: actions/upload-artifact@v2
      if: ${{ matrix.build-type == 'RelWithDebInfo' }}
      with:
        name: ${{ steps.build-snap.outputs.snap-file }}
        path: "*.snap"

  # Publish the snap to the store if a channel was determined and we have access to secrets.
  Publish-Snap:
    needs: Build-Test
    if: ${{ needs.Build-Test.outputs.channel != '' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) }}

    runs-on: ubuntu-latest

    steps:
    - name: Download the built snap
      uses: actions/download-artifact@v2
      with:
        name: ${{ needs.Build-Test.outputs.snap-file }}

    - name: Install Snapcraft and log in
      uses: samuelmeuli/action-snapcraft@v1
      with:
        snapcraft_token: ${{ secrets.SNAPCRAFT_TOKEN }}

    - name: Publish the snap
      run: |
        snapcraft upload *.snap --release ${{ needs.Build-Test.outputs.channel }}

  # Report result to Bors on `staging` and `trying` branches.
  Bors:
    if: ${{ always() && github.event_name == 'push' && contains('refs/heads/staging refs/heads/trying', github.ref) }}
    needs:
    - Lint
    - Build-Test

    runs-on: ubuntu-latest

    steps:
    - name: Check test result
      run: |
        [ ${{ needs.Lint.result }} == success ] && [ ${{ needs.Build-Test.result }} == success ] || exit 1
